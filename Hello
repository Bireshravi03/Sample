import os
import logging
logging.basicConfig(level="DEBUG", format="%(asctime)s - %(levelname)s - %(message)s")
from pathlib import Path
from urllib.parse import quote
from pydantic_settings import BaseSettings
from pydantic import BaseModel

from models.config_models import SnowflakeConfig

class Config(BaseSettings):
    # Service configuration
    SERVICE_PORT: int = int(os.getenv("SERVICE_PORT", 9006))
    SERVICE_REF: str = "o3tdro"

    # LLM Configuration
    # TODO: Add your LLM API keys here
    # GOOGLE_API_KEY: str = os.getenv('GOOGLE_API_KEY', '')
    # GROQ_API_KEY: str = os.getenv("GROQ_API_KEY", "")  # Add GROQ API key
    # GROQ_API_KEY: str = os.getenv("GROQAZURE_OPENAI_API_KEY_API_KEY", "")  # Add GROQ API key
    # GROQ_API_KEY: str = os.getenv("GROQAZURE_OPENAI_ENDPOINT_API_KEY", "")  # Add GROQ API key
    COHERE_API_KEY: str = os.getenv("COHERE_API_KEY", "")
    AZURE_OPENAI_ENDPOINT: str = os.getenv("AZURE_OPENAI_ENDPOINT", "")
    AZURE_OPENAI_API_KEY: str = os.getenv("AZURE_OPENAI_API_KEY", "")

    # Langfuse Configuration
    LANGFUSE_HOST: str = os.getenv("LANGFUSE_HOST", "")
    LANGFUSE_SECRET_KEY: str = os.getenv("LANGFUSE_SECRET_KEY", "")
    LANGFUSE_PUBLIC_KEY: str = os.getenv("LANGFUSE_PUBLIC_KEY", "")

    # LiteLLM Configuration
    AZURE_API_KEY: str = os.getenv("AZURE_API_KEY", "")
    AZURE_API_VERSION: str = os.getenv("AZURE_API_VERSION", "")
    AZURE_API_BASE: str = os.getenv("AZURE_API_BASE", "")

    # Logging Configuration
    LOG_LEVEL: str = os.getenv("LOG_LEVEL", "INFO")
    LOG_FILE: str = os.getenv("LOG_FILE", "../logs/app.log")

    # Data Paths
    # TODO: Update these paths to match your data directory structure
    # FILE_1_CSV: str = str(Path(__file__).parent.joinpath("data", "csv", "file_1.csv"))
    # FILE_2_CSV: str = str(Path(__file__).parent.joinpath("data", "csv", "file_2.csv"))
    CUBE_JSON: str = str(Path(__file__).parent.joinpath("prompts", "cubejs.json"))

    # Model ID
    # TODO: Select your desired model
    MODEL_ID: str = os.getenv(
        "MODEL_ID", "gpt-4o"
    )  # or mistralai/Mistral-7B-Instruct-v0.2

    TEAM_STORAGE_TYPE: str = os.getenv("TEAM_STORAGE_TYPE", "sqlite")
    TEAM_MEMORY_TYPE: str = os.getenv("TEAM_MEMORY_TYPE", "sqlite")  # history
    TEAM_NUM_OF_INTERACTION_FROM_HISTORY: int = int(os.getenv(
        "TEAM_NUM_OF_INTERACTION_FROM_HISTORY", "5"
    ))

    INSTRUMENT_USERNAME: str = os.environ.get("instrument_username", "")
    INSTRUMENT_PASSWORD: str = os.environ.get("instrument_password", "")

    # prompt manager
    PROMPT_MANAGEMENT_FROM: str = os.getenv(
        "PROMPT_MANAGEMENT_FROM", "langfuse"
    )  # local or langfuse
    PROMPT_MANAGER_PROMPT_VERSION: str = os.getenv(
        "PROMPT_MANAGER_PROMPT_VERSION", "production"
    )  # v1 or v2

    POSTGRES_HOST: str = os.getenv("POSTGRES_HOST", "")
    POSTGRES_PORT: str = os.getenv("POSTGRES_PORT", "5432")
    POSTGRES_USER_NAME: str = os.getenv("POSTGRES_USER_NAME", "")
    POSTGRES_PASSWORD: str = os.getenv("POSTGRES_PASSWORD", "")
    POSTGRES_SCHEMA: str = os.getenv("POSTGRES_SCHEMA", "")
    POSTGRES_DATABASE: str = os.getenv("POSTGRES_DATABASE", "")
    EMBEDDINGS_DATABASE: str = os.getenv("EMBEDDINGS_DATABASE", "")
    EMBEDDINGS_POSTGRES_URL: str = f"postgresql://{quote(POSTGRES_USER_NAME)}:{quote(POSTGRES_PASSWORD)}@{POSTGRES_HOST}:{POSTGRES_PORT}/{quote(EMBEDDINGS_DATABASE)}"
    EMBEDDINGS_TABLE_NAME: str = os.getenv("EMBEDDINGS_TABLE_NAME", "embeddings")
    EMBEDDINGS_MODEL: str = os.getenv("EMBEDDINGS_MODEL", "")
    SEMANTIC_VIEW_ENCRYPTION_KEY: str = str(Path(__file__).parent.joinpath("data", "rsa_key.p8"))
    print(SEMANTIC_VIEW_ENCRYPTION_KEY)
    snowflake_config: BaseModel = SnowflakeConfig(
        host=os.getenv("SNOWFLAKE_HOST", ""),
        user=os.getenv("SNOWFLAKE_USER", ""),
        account=os.getenv("SNOWFLAKE_ACCOUNT", ""),
        role=os.getenv("SNOWFLAKE_ROLE", ""),
        warehouse=os.getenv("SNOWFLAKE_WAREHOUSE", ""),
        database=os.getenv("SNOWFLAKE_DATABASE", ""),
        schema=os.getenv("SNOWFLAKE_SCHEMA", ""),
        stage=os.getenv("SNOWFLAKE_STAGE", ""),
        private_key=""
    )
    #password=os.getenv("SNOWFLAKE_PASSWORD", "") private_key_file_pwd=os.getenv("SNOWFLAKE_ENCRYPTION_PASSPHRASE", "")
    SEMANTIC_VIEW_NAME: str = os.getenv("SNOWFLAKE_SEMANTIC_VIEW_NAME", "")
    ENCRYPTION_PASSPHRASE: str = os.getenv("SNOWFLAKE_ENCRYPTION_PASSPHRASE", "")
    # SEMANTIC_FILE_NAME: str = os.getenv("SEMANTIC_FILE_NAME", "")
    VISUALISATION_RULE_EXCEL: str = str(Path(__file__).parent.joinpath("data", "visualisation_rules.xlsx"))
    ME_ANALYST_YAML: str = str(Path(__file__).parent.joinpath("data", "ME_BASE_DATA_TEST.yaml"))

    ANALYST_OPENAI_MODEL: str = os.getenv("ANALYST_OPENAI_MODEL", "")

    ANALYST_MODEL_SERVICE_URL: str = os.getenv("ANALYST_MODEL_SERVICE_URL", "")
    GET_QUESTION_TYPE: str = '/model/generate'

    class Config:
        env_file = ".env"  # Pydantic will look for this file if it exists
        env_file_encoding = "utf-8"


# Create a Config instance
config = Config()

